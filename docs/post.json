[
  {
    "blogPost": "Implementing a Dark Theme Toggle on this Website",
    "explanation": "To enhance user experience by allowing theme customization, a dark theme toggle feature was implemented on the website. A new div element (`mode_button`) was added to the navigation bar, containing an icon (`icon`) that visually indicates the current theme (sun for light mode, moon for dark mode). This button was styled with specific padding, border-radius, and alignment to integrate seamlessly with the navigation bar. An event listener was attached to the button to toggle between themes when clicked. The button adjusts its icon and shifts its position dynamically to reflect the theme change.\n\nThe `theme_change()` function was created to apply the selected theme across the website. In light mode, the background and other elements like cards, logos, and input fields are styled with lighter colors. Dark mode, on the other hand, applies a darker background and adjusts text and element colors for readability. Specific classes were added or removed from various elements to ensure consistent styling. Additionally, shadow effects on cards were adjusted to match the theme. The theme state is saved in `localStorage`, ensuring that the user's preference is preserved across page reloads."
  },

  {
    "blogPost": "Displaying Blog Posts from JSON on a Webpage",
    "explanation": "To dynamically display blog posts on a webpage, a script was implemented that checks if the `blog-list` element exists on the page. If present, an event listener is added to ensure the script runs after the page has fully loaded. The `blogList` element's styling is set to display the posts in a vertical column with gaps between them.\n\nThe script fetches blog data from a `post.json` file using the Fetch API. For each blog post in the JSON data, it populates the title and content by selecting the relevant elements (`.blog-title` and `.blog-text`) and updating their `innerHTML` with the JSON data. After filling in the content, the script clones the `.blog` element containing the blog post and appends it to the `blogList` container. Finally, the original `.blog` element, used as a template, is removed to prevent duplication. This approach allows for dynamic and scalable content management, making it easy to update or add new blog posts by simply editing the JSON file."
  }
]
